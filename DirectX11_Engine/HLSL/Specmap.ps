////////////////
// Specmap.ps
////////////////


Texture2D shaderTextures[3];
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 diffuseColor;
	float4 specularColor;
	float specularPower;
	float3 lightDirection;
};

struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 tangent : TANGENT;
	float3 binormal : BINORMAL;
	float3 viewDirection : TEXCOORD1;
};

float4 SpecMapPixelShader(PixelInputType input) : SV_TARGET
{
	// Sample the texture pixel at this location.
	float4 textureColor = shaderTextures[0].Sample(SampleType, input.tex);
	
	// Sample the pixel in the bump map.
	float4 bumpMap = shaderTextures[1].Sample(SampleType, input.tex);
	
	// Expand the range of the normal value from (0, +1) to (-1, +1).
	bumpMap = (bumpMap * 2.0f) - 1.0f;
	
	// Calculate the normal from the data in the bump map.
	float3 bumpNormal = input.normal + bumpMap.x * input.tangent + bumpMap.y * input.binormal;
	
	// Normalize the resulting bump normal.
	bumpNormal = normalize(bumpNormal);
	
	// Invert the light direction for calculations.
	float3 lightDir = -lightDirection;
	
	float lightIntensity = saturate(dot(bumpNormal, lightDir));
	
	float4 color = saturate(diffuseColor * lightIntensity);
	
	color = color * textureColor;


	if(lightIntensity > 0.0f)
	{
		// Sample the pixel from the specular map texture.
		float4 specularIntensity = shaderTextures[2].Sample(SampleType, input.tex);
		
		// Calculate the reflection vector based on the light intensity, normal vector, and light direction.
		float3 reflection = normalize(2 * lightIntensity * bumpNormal - lightDir);
		
		// Determine the amount of specular light based on the reflection vector, viewing direction, and specular power.
		float4 specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);

		// Use the specular map to determine the intensity of specular light at this pixel.
		specular = specular * specularIntensity;
		
		// Add the specular component last to the output color.
		color = saturate(color + specular);

	}
	
	return color;
}